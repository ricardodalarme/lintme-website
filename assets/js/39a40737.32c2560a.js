"use strict";(self.webpackChunkdart_code_metrics_website=self.webpackChunkdart_code_metrics_website||[]).push([[3886],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(r),d=a,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return r?n.createElement(f,c(c({ref:t},p),{},{components:r})):n.createElement(f,c({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,c=new Array(i);c[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var l=2;l<i;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2427:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={},c="Metrics",o={unversionedId:"metrics/index",id:"metrics/index",title:"Metrics",description:"Metrics are grouped by a category to help you understand their purpose.",source:"@site/docs/metrics/index.md",sourceDirName:"metrics",slug:"/metrics/",permalink:"/docs/metrics/",draft:!1,editUrl:"https://github.com/dart-code-checker/dart-code-metrics/tree/master/website/docs/metrics/index.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"prefer-on-push-cd-strategy",permalink:"/docs/rules/angular/prefer-on-push-cd-strategy"},next:{title:"Cyclomatic Complexity",permalink:"/docs/metrics/cyclomatic-complexity"}},s={},l=[{value:"Function specific metrics",id:"function-specific-metrics",level:2},{value:"Class specific metrics",id:"class-specific-metrics",level:2},{value:"File specific metrics",id:"file-specific-metrics",level:2}],p={toc:l};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"metrics"},"Metrics"),(0,a.kt)("p",null,"Metrics are grouped by a category to help you understand their purpose."),(0,a.kt)("p",null,"Metrics configuration is ",(0,a.kt)("a",{parentName:"p",href:"./getting-started/configuration#configuring-a-metrics-entry"},"described here"),"."),(0,a.kt)("h2",{id:"function-specific-metrics"},"Function specific metrics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/cyclomatic-complexity"},"Cyclomatic Complexity")),(0,a.kt)("p",{parentName:"li"},"  The number of linearly-independent paths through a method.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/halstead-volume"},"Halstead Volume")),(0,a.kt)("p",{parentName:"li"},"  The method size, based on the numbers of operators and operands.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/lines-of-code"},"Lines of Code")),(0,a.kt)("p",{parentName:"li"},"  The number of physical lines of code of a method, including blank lines and comments.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/maintainability-index"},"Maintainability Index")),(0,a.kt)("p",{parentName:"li"},"  The indicator which mean how maintainable the source code is.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/maximum-nesting-level"},"Maximum Nesting")),(0,a.kt)("p",{parentName:"li"},"  The maximum nesting level of control structures within a method.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/number-of-parameters"},"Number of Parameters")),(0,a.kt)("p",{parentName:"li"},"  The number of parameters received by a method.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/source-lines-of-code"},"Source lines of Code")),(0,a.kt)("p",{parentName:"li"},"  The approximate number of source code lines in a method, blank lines and comments are not counted."))),(0,a.kt)("h2",{id:"class-specific-metrics"},"Class specific metrics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/number-of-methods"},"Number of Methods")),(0,a.kt)("p",{parentName:"li"},"  The number of methods of a class.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/weight-of-class"},"Weight of a Class")),(0,a.kt)("p",{parentName:"li"},'  The number of "functional" public methods divided by the total number of public members.'))),(0,a.kt)("h2",{id:"file-specific-metrics"},"File specific metrics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/docs/metrics/technical_debt"},"Technical Debt")),(0,a.kt)("p",{parentName:"li"},"  The cost of additional rework caused by choosing an easy (limited) solution now instead of using a better approach that would take longer."))))}m.isMDXComponent=!0}}]);